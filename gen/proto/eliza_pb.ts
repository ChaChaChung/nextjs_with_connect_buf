// @generated by protoc-gen-es v1.6.1 with parameter "target=ts"
// @generated from file proto/eliza.proto (package connectrpc.eliza.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message connectrpc.eliza.v1.SayRequest
 */
export class SayRequest extends Message<SayRequest> {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence = "";

  constructor(data?: PartialMessage<SayRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.SayRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sentence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SayRequest {
    return new SayRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SayRequest {
    return new SayRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SayRequest {
    return new SayRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SayRequest | PlainMessage<SayRequest> | undefined, b: SayRequest | PlainMessage<SayRequest> | undefined): boolean {
    return proto3.util.equals(SayRequest, a, b);
  }
}

/**
 * @generated from message connectrpc.eliza.v1.SayResponse
 */
export class SayResponse extends Message<SayResponse> {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence = "";

  constructor(data?: PartialMessage<SayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.SayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sentence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SayResponse {
    return new SayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SayResponse {
    return new SayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SayResponse {
    return new SayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SayResponse | PlainMessage<SayResponse> | undefined, b: SayResponse | PlainMessage<SayResponse> | undefined): boolean {
    return proto3.util.equals(SayResponse, a, b);
  }
}

/**
 * @generated from message connectrpc.eliza.v1.Person
 */
export class Person extends Message<Person> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int32 age = 3;
   */
  age = 0;

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * @generated from field: string department = 5;
   */
  department = "";

  /**
   * @generated from field: string position = 6;
   */
  position = "";

  constructor(data?: PartialMessage<Person>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.Person";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "age", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "department", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Person {
    return new Person().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Person {
    return new Person().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Person {
    return new Person().fromJsonString(jsonString, options);
  }

  static equals(a: Person | PlainMessage<Person> | undefined, b: Person | PlainMessage<Person> | undefined): boolean {
    return proto3.util.equals(Person, a, b);
  }
}

/**
 * @generated from message connectrpc.eliza.v1.GetRandomPersonRequest
 */
export class GetRandomPersonRequest extends Message<GetRandomPersonRequest> {
  constructor(data?: PartialMessage<GetRandomPersonRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.GetRandomPersonRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRandomPersonRequest {
    return new GetRandomPersonRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRandomPersonRequest {
    return new GetRandomPersonRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRandomPersonRequest {
    return new GetRandomPersonRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRandomPersonRequest | PlainMessage<GetRandomPersonRequest> | undefined, b: GetRandomPersonRequest | PlainMessage<GetRandomPersonRequest> | undefined): boolean {
    return proto3.util.equals(GetRandomPersonRequest, a, b);
  }
}

/**
 * @generated from message connectrpc.eliza.v1.GetRandomPersonResponse
 */
export class GetRandomPersonResponse extends Message<GetRandomPersonResponse> {
  /**
   * @generated from field: connectrpc.eliza.v1.Person person = 1;
   */
  person?: Person;

  constructor(data?: PartialMessage<GetRandomPersonResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.GetRandomPersonResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "person", kind: "message", T: Person },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRandomPersonResponse {
    return new GetRandomPersonResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRandomPersonResponse {
    return new GetRandomPersonResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRandomPersonResponse {
    return new GetRandomPersonResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRandomPersonResponse | PlainMessage<GetRandomPersonResponse> | undefined, b: GetRandomPersonResponse | PlainMessage<GetRandomPersonResponse> | undefined): boolean {
    return proto3.util.equals(GetRandomPersonResponse, a, b);
  }
}

/**
 * @generated from message connectrpc.eliza.v1.GetAppearanceRequest
 */
export class GetAppearanceRequest extends Message<GetAppearanceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetAppearanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.GetAppearanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppearanceRequest {
    return new GetAppearanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppearanceRequest {
    return new GetAppearanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppearanceRequest {
    return new GetAppearanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppearanceRequest | PlainMessage<GetAppearanceRequest> | undefined, b: GetAppearanceRequest | PlainMessage<GetAppearanceRequest> | undefined): boolean {
    return proto3.util.equals(GetAppearanceRequest, a, b);
  }
}

/**
 * @generated from message connectrpc.eliza.v1.GetAppearanceResponse
 */
export class GetAppearanceResponse extends Message<GetAppearanceResponse> {
  /**
   * @generated from field: connectrpc.eliza.v1.Appearance appearance = 1;
   */
  appearance?: Appearance;

  constructor(data?: PartialMessage<GetAppearanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.GetAppearanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appearance", kind: "message", T: Appearance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppearanceResponse {
    return new GetAppearanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppearanceResponse {
    return new GetAppearanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppearanceResponse {
    return new GetAppearanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppearanceResponse | PlainMessage<GetAppearanceResponse> | undefined, b: GetAppearanceResponse | PlainMessage<GetAppearanceResponse> | undefined): boolean {
    return proto3.util.equals(GetAppearanceResponse, a, b);
  }
}

/**
 * @generated from message connectrpc.eliza.v1.UpdateAppearanceRequest
 */
export class UpdateAppearanceRequest extends Message<UpdateAppearanceRequest> {
  /**
   * @generated from field: connectrpc.eliza.v1.Appearance appearance = 1;
   */
  appearance?: Appearance;

  constructor(data?: PartialMessage<UpdateAppearanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.UpdateAppearanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appearance", kind: "message", T: Appearance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppearanceRequest {
    return new UpdateAppearanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppearanceRequest {
    return new UpdateAppearanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppearanceRequest {
    return new UpdateAppearanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppearanceRequest | PlainMessage<UpdateAppearanceRequest> | undefined, b: UpdateAppearanceRequest | PlainMessage<UpdateAppearanceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAppearanceRequest, a, b);
  }
}

/**
 * @generated from message connectrpc.eliza.v1.UpdateAppearanceResponse
 */
export class UpdateAppearanceResponse extends Message<UpdateAppearanceResponse> {
  /**
   * @generated from field: connectrpc.eliza.v1.Appearance appearance = 1;
   */
  appearance?: Appearance;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateAppearanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.UpdateAppearanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appearance", kind: "message", T: Appearance },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppearanceResponse {
    return new UpdateAppearanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppearanceResponse {
    return new UpdateAppearanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppearanceResponse {
    return new UpdateAppearanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppearanceResponse | PlainMessage<UpdateAppearanceResponse> | undefined, b: UpdateAppearanceResponse | PlainMessage<UpdateAppearanceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAppearanceResponse, a, b);
  }
}

/**
 * @generated from message connectrpc.eliza.v1.Appearance
 */
export class Appearance extends Message<Appearance> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string logo_url = 2;
   */
  logoUrl = "";

  /**
   * @generated from field: string primary_color = 3;
   */
  primaryColor = "";

  /**
   * @generated from field: string secondary_color = 4;
   */
  secondaryColor = "";

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 6;
   */
  updatedAt = "";

  /**
   * @generated from field: string logo_key = 7;
   */
  logoKey = "";

  /**
   * @generated from field: int64 logo_size = 8;
   */
  logoSize = "";

  /**
   * @generated from field: string logo_type = 9;
   */
  logoType = "";

  constructor(data?: PartialMessage<Appearance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "connectrpc.eliza.v1.Appearance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "logo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "primary_color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "secondary_color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "logo_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "logo_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "logo_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Appearance {
    return new Appearance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Appearance {
    return new Appearance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Appearance {
    return new Appearance().fromJsonString(jsonString, options);
  }

  static equals(a: Appearance | PlainMessage<Appearance> | undefined, b: Appearance | PlainMessage<Appearance> | undefined): boolean {
    return proto3.util.equals(Appearance, a, b);
  }
}
